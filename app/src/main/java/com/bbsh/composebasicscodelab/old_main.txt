package com.bbsh.composebasicscodelab

import android.content.Context
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.bbsh.composebasicscodelab.ui.theme.ComposeBasicsCodelabTheme


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            ComposeBasicsCodelabTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    MyApp(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(innerPadding)
                    )
                }
            }
        }
    }
}

@Composable
fun MyApp(
    modifier: Modifier = Modifier,
    context: Context = LocalContext.current,
    names: List<String> = listOf("World", "Compose")
) {
    Surface(
        modifier = modifier,
        color = MaterialTheme.colorScheme.background,
    ) {
        Column(modifier = modifier.padding(vertical = 4.dp)) {
            for (name in names) {
                val newName = remember { mutableStateOf(name) }

                if (names.indexOf(name) % 2 == 0) {
                    Greeting(
                        name = if (newName.value.isNotBlank()) newName.value else name,
                        color = Color.Blue,
                        onClick = {
                            Toast.makeText(context, "Hello $name", Toast.LENGTH_SHORT).show()
                            newName.value = "hehe"
                        })
                } else {
                    Spacer(modifier = Modifier.padding(vertical = 4.dp))
                    MyCutieText(name = newName.value)
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier, color: Color, onClick: () -> Unit = {}) {
    Row {
        Text(
            text = "Hello $name!",
            modifier = modifier.padding(start = 4.dp),
            color = color
        )
        Spacer(modifier.padding(all = 5.dp))
        Button(
            onClick, modifier = Modifier.size(width = 100.dp, height = 20.dp),
            contentPadding = PaddingValues(start = 12.dp, end = 16.dp)
        ) {
            Text("Click me", fontSize = 4.sp)
        }
    }
}

@Composable
fun MyCutieText(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "$name is my cutie",
        modifier = modifier,
        color = Color(0xD1EE26EB),
        fontWeight = FontWeight.Bold
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    ComposeBasicsCodelabTheme {
        MyApp()
    }
}

@Composable
fun OnboardingScreen(modifier: Modifier = Modifier,  onContinueClicked: () -> Unit) {
    // TODO: This state should be hoisted
    var shouldShowOnboarding by remember { mutableStateOf(true) }

    Column(
        modifier = modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Welcome to the Basics Codelab!")
        Button(
            modifier = Modifier.padding(vertical = 24.dp),
            onClick = onContinueClicked
        ) {
            Text("Continue")
        }
    }
}

@Preview(showBackground = true, widthDp = 320, heightDp = 320)
@Composable
fun OnboardingPreview() {
    ComposeBasicsCodelabTheme {
        OnboardingScreen(onContinueClicked = {})
    }
}